installed.packages()
update.packages()
installed.packages()
library("DESeq2")
library("ggplot2")
library("gplots")
library("ggrepel")
library("dplyr")
library("pheatmap")
library("grid")
library("corrplot")
library(RColorBrewer)
knitr::opts_chunk$set(echo = TRUE)
workingdir="C:/Users/eddie/Research/GitHub"
#set working directory to the correct location for working machine
knitr::opts_knit$set(root.dir = "workingdir")
#Bring in table with unnormalized transcription counts; check.names is important if you have dashes in the gene names
#row.names=1 command sets geneIDs as the row name
countdataInteractors <- read.table("./text_files/readcounts_FINAL.txt",skip=1, header=TRUE,stringsAsFactors=FALSE, row.names=1, check.names=FALSE, sep="\t")
countdataInteractors <- read.table("./text_files/readcounts_newseq.txt",skip=1, header=TRUE,stringsAsFactors=FALSE, row.names=1, check.names=FALSE, sep="\t")
workdir()
dir()
pwd()
getwd()
countdataInteractors <- read.table("./text_files/readcounts_newseq.txt",skip=1, header=TRUE,stringsAsFactors=FALSE, row.names=1, check.names=FALSE, sep="\t")
#create matrix containing count data only; i.e. eliminate contig, start, stop, length fields
Interactors_countsOnly <- data.matrix(countdataInteractors[ ,6:ncol(countdataInteractors)])
##Run calculateTPM function - must load "scater" library
library("scater")
Interactors_tpm <- calculateTPM(Interactors_countsOnly, lengths = countdataInteractors[,5])
##convert to matrix again
allDataTPM  <- data.matrix(Interactors_tpm)
#step 1 create a varialbe with the current, long column names
samplesname <- colnames(allDataTPM)
#write the long sample names to a spreadsheet file so these can be manipulated in excel or text editor
write.table(samplesname, file="samplenames.txt", sep="\t")
#move the subset of genes you want to plot into a new matrix
sampleNames <- colnames(allDataTPM)
write.table(sampleNames, file="names.txt")
Ordered_KO_data <- cbind(allDataTPM[,22:25],allDataTPM[,26:28],allDataTPM[,1:3],allDataTPM[,29:31],allDataTPM[,4:6],allDataTPM[,32:34],allDataTPM[,35:37],allDataTPM[,7:9],allDataTPM[,10:12],allDataTPM[,16:18],allDataTPM[,13:15],allDataTPM[,19:21])
Averaged_Orderd_KO_data <- cbind(rowMeans(allDataTPM[,22:25], na.rm = TRUE),
rowMeans(allDataTPM[,26:28], na.rm = TRUE),
rowMeans(allDataTPM[,1:3], na.rm = TRUE),
rowMeans(allDataTPM[,29:31], na.rm = TRUE),
rowMeans(allDataTPM[,4:6], na.rm = TRUE),
rowMeans(allDataTPM[,32:34], na.rm = TRUE),
rowMeans(allDataTPM[,35:37], na.rm = TRUE),
rowMeans(allDataTPM[,7:9], na.rm = TRUE),
rowMeans(allDataTPM[,10:12], na.rm = TRUE),
rowMeans(allDataTPM[,16:18], na.rm = TRUE),
rowMeans(allDataTPM[,13:15], na.rm = TRUE),
rowMeans(allDataTPM[,19:21], na.rm = TRUE))
averageRowIDs=c("WT","set-7","cac-1","cac-1_new","cac-2", "cac-1_cac-2","cac-1_suz12","cac-3","naf-1","naf-2","asf-1","ATRX")
colnames(Averaged_Orderd_KO_data) <- averageRowIDs
#read in geneIDs of PRC2 target genes
Prc2targets <- read.table("./text_files/K27_narrow_genes_sorted.txt", header=FALSE, stringsAsFactors=FALSE, check.names=FALSE, sep="\t")
#read in geneIDs of PRC2 target genes
Prc2targets <- read.table("./text_files/K27_narrow_genes_sorted.txt", header=FALSE, stringsAsFactors=FALSE, check.names=FALSE, sep="\t")
###SUBSET DATA FOR ALL KO SAMPLES
Prc2targetTPM <- subset(allDataTPM, rownames(allDataTPM)%in%Prc2targets[,1])
###SUBSET DATA FOR AVERAGED KO SAMPLES
AVERAGE_Prc2targetTPM <- subset(Averaged_Orderd_KO_data, rownames(Averaged_Orderd_KO_data)%in%Prc2targets[,1])
###Subset data to filter out non-PRC2 target regions that got through (cutting out any genes over 2 tpm in WT)
AVERAGE_Prc2targetTPM <- subset(AVERAGE_Prc2targetTPM, (AVERAGE_Prc2targetTPM[,1] < 9.5))
###Add sudocount and log transform (if necessary)
AVERAGE_Prc2targetTPM <- AVERAGE_Prc2targetTPM + 1
AVERAGE_Prc2targetTPM <- log2(AVERAGE_Prc2targetTPM)
#melt data to get it into a format ggplots can use (load library "reshape2")
library(reshape2)
meltedPRC2targetData <- melt(AVERAGE_Prc2targetTPM, value.name = 'Count',
varnames=c('GeneID', 'Sample'))
#Alldata
meltedAllData <- melt(AVERAGE_AlldataTPM, value.name = 'Count',
varnames=c('GeneID', 'Sample'))
meltedAveragePRC2targetData <- melt(AVERAGE_Prc2targetTPM, value.name = 'Count',
varnames=c('GeneID', 'Sample'))
altorder = rev(c( "WT","set-7","cac-1","cac-1_new","cac-2","cac-1_cac-2","cac-1_suz12","cac-3","naf-1","naf-2","asf-1","ATRX"))
meltedAveragePRC2targetData$Sample <- factor(meltedAveragePRC2targetData$Sample)
# Plot box & whisker chart
library(ggplot2)
xlabels = averageRowIDs
colors = c( "#4575b4","#fee090","#fee090", "#fee090", "#fee090", "#fee090","#fee090","#fee090","#4575b4", "#4575b4", "#4575b4", "#4575b4")
box<-ggplot(meltedAveragePRC2targetData, aes(x=Sample, y=Count)) +
labs(y="Expression Level (Transcripts per Million)", x="Strain") +
stat_boxplot(geom = "errorbar", width = 0.2) +
geom_boxplot(notch = TRUE, fill=colors, size=0.1, coef=1.5, lwd=0.25) +
ylim(0, 11.5) +
theme_get() +
theme(axis.line.x = element_line(size = 0.5, colour = "black"),
axis.line.y = element_line(size = 0.5, colour = "black"),
axis.line = element_line(size=3, colour = "black"))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank()) +
theme(text = element_text(size = 10), axis.title.x=element_text(size=10, margin=margin(t = 10, r = 0, b = 0, l = 0),),axis.title.y=element_text( size=10)) +
theme(axis.text.x=element_text(angle = 270, vjust = 0.5, hjust = 1, size=10 )) +
theme(axis.text.y=element_text(vjust = 0.5, hjust = 1, size=10 ))
guides(fill=F)
#device.on()
box
#I want to make a violin plot instead of boxplot. Going to adapt Abby's code
library(grDevices)
total2 <- meltedAveragePRC2targetData %>%
group_by(Sample)
total_dist = meltedAveragePRC2targetData %>%
group_by(Sample) %>% summarise(num=n())
#Setting distance between violins in plot
dodge <- position_dodge(width = 1)
###  plotting violin plot
### this chunk is just for putting samples in the order that I want ###
violin <- total2 %>%
left_join(total_dist) %>%
arrange(factor(Sample, levels = c("WT", "set-7", "cac-1", "cac-1_new", "cac-2", "cac-1_cac-2", "cac-1_suz12", "cac-3", "naf-1", "naf-2", "asf-1", "ATRX"))) %>%
mutate(Sample = factor(Sample)) %>%
### everything below is the actual violin plot ###
ggplot(aes(x=Sample, y=Count)) +
geom_violin(position = dodge, scale="width", trim=FALSE) +
stat_summary(fun = "mean", geom = "crossbar", width = 0.25, colour = "black") +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = 0.25, colour = "red") +
scale_fill_manual("",values = c("orchid1", "springgreen3")) +
labs(x = "Strain",y = expression("Expression Level (log "[2]~"(TPM+1)")) +
theme_classic(base_size = 20)
print(violin)
###  plotting violin plot
### this chunk is just for putting samples in the order that I want ###
violin <- total2 %>%
left_join(total_dist) %>%
arrange(factor(Sample, levels = c("WT", "set-7", "cac-1", "cac-1_new", "cac-2", "cac-1_cac-2", "cac-1_suz12", "cac-3", "naf-1", "naf-2", "asf-1", "ATRX"))) %>%
mutate(Sample = factor(Sample)) %>%
### everything below is the actual violin plot ###
ggplot(aes(x=Sample, y=Count)) +
geom_violin(position = dodge, scale="width", trim=FALSE) +
stat_summary(fun = "mean", geom = "crossbar", width = 0.25, colour = "red") +
scale_fill_manual("",values = c("orchid1", "springgreen3")) +
labs(x = "Strain",y = expression("Expression Level (log "[2]~"(TPM+1)")) +
theme_classic(base_size = 20)
print(violin)
library(pheatmap)
library(RColorBrewer)
breaks1=seq(-4, 5, by=.09) #This is to set a custom heatmaps scale. Not used here.
##Keep Only Genes that are expressed in at least one sample
GenesWithChanges <- subset(AVERAGE_Prc2targetTPM, (rowSums(Prc2targetTPM) > 0))
View(AVERAGE_Prc2targetTPM)
View(Prc2targetTPM)
Prc2targetTPM <- subset(Prc2targetTPM, rownames(Prc2targetTPM)%in%AVERAGE_Prc2targetTPM)
###SUBSET DATA FOR ALL KO SAMPLES
Prc2targetTPM <- subset(allDataTPM, rownames(allDataTPM)%in%Prc2targets[,1])
Prc2targetTPM <- subset(Prc2targetTPM, rownames(Prc2targetTPM)%in%rownames(AVERAGE_Prc2targetTPM))
###Subset data to filter out non-PRC2 target regions that got through (cutting out any genes over 2 tpm in WT)
AVERAGE_Prc2targetTPM <- subset(AVERAGE_Prc2targetTPM, (AVERAGE_Prc2targetTPM[,1] < 12.5))
###resubet PRC2 targets after filtering
Prc2targetTPM <- subset(Prc2targetTPM, rownames(Prc2targetTPM)%in%rownames(AVERAGE_Prc2targetTPM))
##Keep Only Genes that are expressed in at least one sample
GenesWithChanges <- subset(AVERAGE_Prc2targetTPM, (rowSums(Prc2targetTPM) > 0))
heatmap1 <- pheatmap(GenesWithChanges[,rev(altorder)], color = colorRampPalette(rev(brewer.pal(n = 7, name ="RdBu")))(100),
cellwidth = NA, cellheight = NA, scale = "row", cluster_rows = T, cluster_cols = F, clustering_method="centroid", clustering_distance_cols="euclidean",
legend=T, show_rownames=F, show_colnames=T, fontsize_col=10, treeheight_row=0, treeheight_col=5, height = 1.5, width = 2.5)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:\\Users\\eddie\\Research\\GitHub\\Research")
library("DESeq2")
library("scales")
library(readr)
library(readr)
library(tidyr)
library(tidyr)
library(tidyverse)
ctstest <- as.matrix(read.table("./text_files/readcounts_newseq.txt", sep="\t", row.names =1, header = TRUE))
View(ctstest)
ctstest <- as.matrix(ctstest[,-c(1:5)])
## change ncol to match number of columns
cts_numeric <- matrix(as.numeric(ctstest), ncol = 28)
## change ncol to match number of columns
cts_numeric <- matrix(as.numeric(ctstest), ncol = 37)
dimnames(cts_numeric) <- list(rownames(ctstest), colnames(ctstest))
samplesname <- colnames(ctstest)
write.table(samplesname, file="samplenames.txt", sep="\t")
#after editing sample names in excel or text editor (new names are in column 3), read in the spreadsheet with hand annotated sample names that are short
rename <- read.table("./samplenames2.txt", header=FALSE, skip=1, sep = "\t")
#assign short sample names to variable
cnames <- rename$V2
getwd()
#after editing sample names in excel or text editor (new names are in column 3), read in the spreadsheet with hand annotated sample names that are short
rename <- read.table("./samplenames2.txt", header=FALSE, skip=1, sep = "\t")
#after editing sample names in excel or text editor (new names are in column 3), read in the spreadsheet with hand annotated sample names that are short
rename <- read.table("./samplenames2.txt", header=FALSE, skip=1, sep = "\t")
#after editing sample names in excel or text editor (new names are in column 3), read in the spreadsheet with hand annotated sample names that are short
rename <- read.table("./samplenames3.txt", header=FALSE, skip=1, sep = "\t")
#after editing sample names in excel or text editor (new names are in column 3), read in the spreadsheet with hand annotated sample names that are short
rename <- read.table("./samplenames2.txt", header=FALSE, skip=1, sep = "\t")
#assign short sample names to variable
cnames <- rename$V2
#replace column names
colnames(cts_numeric) <- cnames
View(cts_numeric)
cac1 <- rowMeans(cts_numeric[, 1:3], na.rm = TRUE)
cac2 <- rowMeans(cts_numeric[, 4:6], na.rm = TRUE)
cac3 <- rowMeans(cts_numeric[, 7:9], na.rm = TRUE)
naf1 <- rowMeans(cts_numeric[, 10:12], na.rm = TRUE)
asf1 <- rowMeans(cts_numeric[, 13:15], na.rm = TRUE)
naf2 <- rowMeans(cts_numeric[, 16:18], na.rm = TRUE)
ATRX <- rowMeans(cts_numeric[, 19:21], na.rm = TRUE)
WT <- rowMeans(cts_numeric[, 22:25], na.rm = TRUE)
set7 <- rowMeans(cts_numeric[, 26:28], na.rm = TRUE)
cac1_new <- rowMeans(cts_numeric[, 29:31], na.rm = TRUE)
cac1_cac2 <- rowMeans(cts_numeric[, 32:34], na.rm = TRUE)
cac1_suz12 <- rowMeans(cts_numeric[, 35:37], na.rm = TRUE)
#set3 <- rowMeans(cts_numeric[, 29:30], na.rm = TRUE)
#Check Directory (./ vs ../)
coldata <- read.csv("../coldata.csv", header= TRUE, row.names = 1)
View(coldata)
#Check Directory (./ vs ../)
coldata <- read.csv("../coldata.csv", header= TRUE, row.names = 1)
coldata$condition <- factor(coldata$condition)
coldata$type <- factor(coldata$type)
all(rownames(coldata) %in% colnames(cts_numeric))
all(rownames(coldata) == colnames(cts_numeric))
#pseudocount
cts_numeric_3 = cts_numeric + 1
##create DEseq dataset
dds<- DESeqDataSetFromMatrix(countData = round(cts_numeric_3),
colData = coldata,
design = ~ condition)
dds
##pre-filteringreads <2
keep <- rowSums(counts(dds)) >= 29
##pre-filteringreads <2
keep <- rowSums(counts(dds)) >= 38
dds<- dds[keep,]
#specify level of comparison
dds$condition <- relevel(dds$condition, ref = "WT")
dds2 <- DESeq(dds)
plotDispEsts(dds2)
alpha = 0.05
cac1 <- results(dds2, alpha=alpha, contrast=c("condition", "cac1", "WT"))
cac2 <- results(dds2, alpha=alpha, contrast=c("condition", "cac2", "WT"))
cac3<- results(dds2, alpha=alpha, contrast=c("condition", "cac3", "WT"))
naf1 <- results(dds2, alpha=alpha, contrast=c("condition", "naf1", "WT"))
naf2 <- results(dds2, alpha=alpha, contrast=c("condition", "naf2", "WT"))
asf1 <- results(dds2, alpha=alpha, contrast=c("condition", "asf1", "WT"))
ATRX <- results(dds2, alpha=alpha, contrast=c("condition", "ATRX", "WT"))
set7 <- results(dds2, alpha=alpha, contrast=c("condition", "set7", "WT"))
cac1_new <- results(dds2, alpha=alpha, contrast=c("condition", "cac1_new", "WT"))
cac1_cac2 <- results(dds2, alpha=alpha, contrast=c("condition", "cac1_cac2", "WT"))
cac1_suz12 <- results(dds2, alpha=alpha, contrast=c("condition", "cac1_suz12", "WT"))
#set3 <- results(dds2, alpha=alpha, contrast=c("condition", "set3", "WT"))
cac1_sig <- subset(cac1, padj < 0.05)
cac2_sig <- subset(cac2, padj < 0.05)
cac3_sig <- subset(cac3, padj < 0.05)
naf1_sig <- subset(naf1, padj < 0.05)
naf2_sig <- subset(naf2, padj < 0.05)
asf1_sig <- subset(asf1, padj < 0.05)
ATRX_sig <- subset(ATRX, padj < 0.05)
set7_sig <- subset(set7, padj < 0.05)
cac1_new_sig <- subset(cac1_new, padj < 0.05)
cac1_cac2_sig <- subset(cac1_cac2, padj < 0.05)
cac1_suz12_sig <- subset(cac1_suz12, padj < 0.05)
#set3 <- subset(set3, padj < 0.05)
write.csv(as.data.frame(cac1_sig), file = "cac1.csv")
write.csv(as.data.frame(cac2_sig), file = "cac2.csv")
write.csv(as.data.frame(cac3_sig), file = "cac3.csv")
write.csv(as.data.frame(naf1_sig), file = "naf1.csv")
write.csv(as.data.frame(naf2_sig), file = "naf2.csv")
write.csv(as.data.frame(asf1_sig), file = "asf1.csv")
write.csv(as.data.frame(ATRX_sig), file = "ATRX.csv")
write.csv(as.data.frame(set7_sig), file = "set7.csv")
write.csv(as.data.frame(cac1_new_sig), file = "cac1_new.csv")
write.csv(as.data.frame(cac1_cac2_sig), file = "cac1_cac2.csv")
write.csv(as.data.frame(cac1_suz12_sig), file = "cac1_suz12.csv")
#write.csv(as.data.frame(set3), file = "set3.csv")
list_of_files <- list.files(path = "../Research",
recursive = TRUE,
pattern = ".csv$")
induced_genes <- readr::read_csv(list_of_files, id = "file_name")
##convert to wide format
l2fc_data <- data.frame(pivot_wider(data = induced_genes, id_cols = "...1", names_from = "file_name", values_from = "log2FoldChange"))
rownames(l2fc_data) <- l2fc_data[,1]
l2fc_data <- l2fc_data[,-1]
l2fc_data[is.na(l2fc_data)] <- 0
library(tibble)
l2fc <- tibble::rownames_to_column(l2fc_data, "VALUE")
ngenes = read.csv("../csv_files/neurospora_genes.csv")
ngenes = read.csv("../csv_files/neurospora_genes.csv")
combine <- transform(merge(ngenes, l2fc, by = "VALUE"))
track = combine %>% select("SequenceID", "FeatureStart", "FeatureEnd", "VALUE", "asf1.csv", "ATRX.csv", "cac1.csv", "cac2.csv", "cac3.csv", "naf1.csv", "naf2.csv", "set7.csv", "cac1_new.csv", "cac1_cac2.csv", "cac1_suz12.csv")
write.table(track, file="newseq.igv", sep="\t", row.names = FALSE, quote = FALSE)
heatmap1 <- pheatmap(GenesWithChanges[,rev(altorder)], color = colorRampPalette(rev(brewer.pal(n = 7, name ="RdBu")))(100),
cellwidth = NA, cellheight = NA, scale = "row", cluster_rows = T, cluster_cols = F, clustering_method="centroid", clustering_distance_cols="euclidean",
legend=T, show_rownames=F, show_colnames=T, fontsize_col=10, treeheight_row=0, treeheight_col=5, height = 1.5, width = 2.5)
print(violin)
View(ctstest)
